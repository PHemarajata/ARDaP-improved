params {

    fastq               =   "*_{1,2}.fastq.gz"
    assemblies          =   false
    assembly_loc        =   "assemblies/*.fasta"
    species             =   "Burkholderia_pseudomallei"
    patientMetaData     =   "${baseDir}/Reports/data/patientMetaData.csv"
    gwas                =   false
	notrim              =   true
    matrix              =   true
    annotate            =   true
    mixtures            =   false
    phylogeny           =   false
    antibiotic_res      =   true
    strain              =   "all"
    tech                =   "Illumina"
    pairing             =   "PE"
    window              =   10000
    indel_merge         =   true
    tri_tetra_allelic   =   false
    size                =   1000000
    phred               =   "-phred33"
    org                 =   "haploid"
    executor            =   "local"
    delly               =   true
	fast                =   true
}

includeConfig 'configs/gatk.config'
conda.enabled = true

// If the executor is not local, set the conda prefix for processes. Use a
// ternary expression to avoid top-level `if` blocks which conflict with config
// statement ordering.
process.conda = params.executor != 'local' ? System.getenv('CONDA_PREFIX') : null

process {

    executor = params.executor

    errorStrategy = "retry"
	maxRetries = 4
	
	withLabel: art {
        cpus = 1
        memory = { 4.GB * task.attempt }
        time = "8h"
	}
	
    withLabel: card {
        cpus = 1
        memory = "4G"
        time = "8h"
    }

    withLabel: index {
        cpus = 1
        memory = "4G"
        time = "8h"
    }

    withLabel: ardap_default {
        cpus = 2
        memory = { 4.GB * task.attempt }
        time = "24h"
    }

    withLabel: alignment {
        cpus = 4
        memory = { 4.GB * task.attempt }
        time = "24h"
    }
	withLabel: trimmomatic {
        cpus = 2
        memory = { 4.GB * task.attempt }
        time = "24h"
    }
	withLabel: markduplicates {
        cpus = 2
        memory = { 4.GB * task.attempt }
        time = "24h"
    }
    withLabel: gatk_haplo {
        cpus = 4
        memory = { 4.GB * task.attempt }
        time = "24h"
    }
	withLabel: gatk {
        cpus = 4
        memory = { 4.GB * task.attempt }
        time = "24h"
    }

    withLabel: snpeff {
        cpus = 1
        memory = { 4.GB * task.attempt }
        time = "24h"
        // use isolated snpEff conda environment (snpEff v5+)
        conda = "${baseDir}/envs/snpeff.yml"
    }

    withLabel: pindel {
        cpus = 2
        memory = { 4.GB * task.attempt }
        time = "96h"
    }

    withLabel: genomic_queries {
        cpus = 1
        memory = "4G"
        time = "8h"
    }

    withLabel: card_queries {
        cpus = 1
        memory = "4G"
        time = "2h"
    }

    withLabel: report {
        cpus = 1
        memory = "4G"
        time = "2h"
    }

	withLabel: master_vcf {
        cpus = 1
        memory = { 4.GB * task.attempt }
        time = "24h"
    }
	withLabel: snp_matrix {
        cpus = 1
        memory = { 4.GB * task.attempt }
        time = "24h"
    }
}

manifest {
    homePage = 'http://github.com/dsarov/ARDaP'
    description = 'Comprehensive resistance detection from WGS'
    mainScript = 'main.nf'
    version = '1.9'
}

// Custom hardware profiles
// - workstation: 22 cores, 64 GB RAM (leave some headroom for OS and I/O)
// - dgx: NVIDIA DGX Station A100: ~128 cores, 512 GB RAM (high parallel capacity)
//
// These profiles override per-label CPU/memory defaults declared above. They are
// conservative allocations intended to keep heavy steps (alignment / GATK / Pindel)
// using more cores and memory on large machines while keeping lightweight steps
// small to allow parallelism. To run use: `nextflow run main.nf -profile workstation`
// or `-profile dgx`.
profiles {
    workstation {
        process {
            // hardware totals: 22 cores, 64G RAM — reserve a small amount for OS
            withLabel: art { cpus = 1;  memory = '4G' }
            withLabel: card { cpus = 1;  memory = '4G' }
            withLabel: index { cpus = 1; memory = '4G' }
            withLabel: ardap_default { cpus = 2; memory = '8G' }
            // alignment is moderately heavy: give 8 cores and 32G
            withLabel: alignment { cpus = 8; memory = '32G' }
            withLabel: trimmomatic { cpus = 2; memory = '8G' }
            withLabel: markduplicates { cpus = 4; memory = '16G' }
            withLabel: gatk_haplo { cpus = 8; memory = '32G' }
            withLabel: gatk { cpus = 8; memory = '32G' }
            withLabel: snpeff { cpus = 1; memory = '4G'; conda = "${baseDir}/envs/snpeff.yml" }
            // Pindel can be memory hungry; give 4 cores and a larger chunk of RAM
            withLabel: pindel { cpus = 4; memory = '48G' }
            withLabel: genomic_queries { cpus = 1; memory = '4G' }
            withLabel: card_queries { cpus = 1; memory = '4G' }
            withLabel: report { cpus = 1; memory = '4G' }
            withLabel: master_vcf { cpus = 4; memory = '16G' }
            withLabel: snp_matrix { cpus = 2; memory = '8G' }
        }
    }

    dgx {
        process {
            // hardware totals: 128 cores, 512G RAM — generous allocations for heavy steps
            withLabel: art { cpus = 2;  memory = '8G' }
            withLabel: card { cpus = 2; memory = '8G' }
            withLabel: index { cpus = 4; memory = '16G' }
            withLabel: ardap_default { cpus = 4; memory = '16G' }
            // alignment, GATK and haplotype steps are CPU and memory heavy — scale up
            withLabel: alignment { cpus = 32; memory = '128G' }
            withLabel: trimmomatic { cpus = 8; memory = '32G' }
            withLabel: markduplicates { cpus = 8; memory = '64G' }
            withLabel: gatk_haplo { cpus = 32; memory = '128G' }
            withLabel: gatk { cpus = 32; memory = '128G' }
            withLabel: snpeff { cpus = 4; memory = '16G'; conda = "${baseDir}/envs/snpeff.yml" }
            withLabel: pindel { cpus = 16; memory = '256G' }
            withLabel: genomic_queries { cpus = 4; memory = '16G' }
            withLabel: card_queries { cpus = 4; memory = '16G' }
            withLabel: report { cpus = 2; memory = '8G' }
            withLabel: master_vcf { cpus = 8; memory = '64G' }
            withLabel: snp_matrix { cpus = 8; memory = '64G' }
        }
    }
}
